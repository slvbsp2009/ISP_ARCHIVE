--- CBM3D.m	2014-10-09 11:36:12.000000000 -0700
+++ CBM3D_modified.m	2014-10-09 11:36:42.000000000 -0700
@@ -134,26 +134,26 @@
 %%%%
 
 %%%% Select transforms ('dct', 'dst', 'hadamard', or anything that is listed by 'help wfilters'):
-transform_2D_HT_name     = 'bior1.5'; %% transform used for the HT filt. of size N1 x N1
-transform_2D_Wiener_name = 'dct';     %% transform used for the Wiener filt. of size N1_wiener x N1_wiener
+transform_2D_HT_name     = 'dct'; %% transform used for the HT filt. of size N1 x N1
+transform_2D_Wiener_name = 'dst';     %% transform used for the Wiener filt. of size N1_wiener x N1_wiener
 transform_3rd_dim_name   = 'haar';    %% transform used in the 3-rd dim, the same for HT and Wiener filt.
 
 %%%% Hard-thresholding (HT) parameters:
-N1                  = 8;   %% N1 x N1 is the block size used for the hard-thresholding (HT) filtering
-Nstep               = 3;   %% sliding step to process every next reference block
+N1                  = 4;   %% N1 x N1 is the block size used for the hard-thresholding (HT) filtering
+Nstep               = 1;   %% sliding step to process every next reference block
 N2                  = 16;  %% maximum number of similar blocks (maximum size of the 3rd dimension of a 3D array)
-Ns                  = 39;  %% length of the side of the search neighborhood for full-search block-matching (BM), must be odd
-tau_match           = 3000;%% threshold for the block-distance (d-distance)
+Ns                  = 49;  %% length of the side of the search neighborhood for full-search block-matching (BM), must be odd
+tau_match           = 3000*3;%% threshold for the block-distance (d-distance)
 lambda_thr2D        = 0;   %% threshold parameter for the coarse initial denoising used in the d-distance measure
 lambda_thr3D        = 2.7; %% threshold parameter for the hard-thresholding in 3D transform domain
 beta                = 2.0; %% parameter of the 2D Kaiser window used in the reconstruction
 
 %%%% Wiener filtering parameters:
-N1_wiener           = 8;
-Nstep_wiener        = 3;
-N2_wiener           = 32;
+N1_wiener           = 4;
+Nstep_wiener        = 1;
+N2_wiener           = 8*2;
 Ns_wiener           = 39;
-tau_match_wiener    = 400;
+tau_match_wiener    = 400*3;
 beta_wiener         = 2.0;
 
 %%%% Block-matching parameters:
@@ -359,13 +359,19 @@
     lambda_thr3D, tau_match*N1*N1/(255*255), (Ns-1)/2, sigma/255, thrToIncStep, single(Tfor), single(Tinv)', inverse_hadper_trans_single_den, single(thr_mask), 'unused arg', 'unused arg', l2normLumChrom, Wwin2D, smallLN, stepFS );
 estimate_elapsed_time = toc;
 
+yRGB_hat = double(y_hat);
+yRGB_hat = function_LumChrom2rgb(yRGB_hat, colorspace);
+yRGB_hat = double(min(1,max(0,yRGB_hat)));
+[zColSpace2 l2normLumChrom2] = function_rgb2LumChrom(zRGB, 'opp');
+[y_hat2] = single(function_rgb2LumChrom((yRGB_hat), 'opp'));
+
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%% Step 2. Final estimate by collaborative Wiener filtering and using
 %%%% the grouping constraint on the chrominances.
 %%%%
 tic;
-yRGB_est = bm3d_wiener_color(zColSpace, y_hat, hadper_trans_single_den, Nstep_wiener, N1_wiener, N2_wiener, ...
+yRGB_est = bm3d_wiener_color(zColSpace2, y_hat2, hadper_trans_single_den, Nstep_wiener, N1_wiener, N2_wiener, ...
     'unused_arg', tau_match_wiener*N1_wiener*N1_wiener/(255*255), (Ns_wiener-1)/2, sigma/255, 'unused arg', single(TforW), single(TinvW)', inverse_hadper_trans_single_den, 'unused arg', 'unused arg', l2normLumChrom, Wwin2D_wiener, smallLNW, stepFSW );
 wiener_elapsed_time = toc;
 
@@ -374,7 +380,7 @@
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%% Convert back to RGB colorspace
 %%%%
-yRGB_est = function_LumChrom2rgb(yRGB_est, colorspace);
+yRGB_est = function_LumChrom2rgb(yRGB_est, 'opp');
 
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
